/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.ActiveServiceQueue;
import Business.MyThread;
import Business.ReqServiceDispatcher;
import Business.RequestGenerator;
import Business.ServiceQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
/**
 *
 * @author Mrunalini
 */
public class CreateJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateJPanel
     */
    
  
    private RequestGenerator requestGenerator;
    //private ServiceQueue serviceQueue;
    private ReqServiceDispatcher reqServiceDispatcher;
    private ActiveServiceQueue activeServiceQueue;
    
    public CreateJPanel( RequestGenerator requestGenerator, ReqServiceDispatcher reqServiceDispatcher) {
        initComponents();
      this.requestGenerator = requestGenerator;
      //this.serviceQueue = serviceQueue;
      this.reqServiceDispatcher = reqServiceDispatcher;
      this.activeServiceQueue = reqServiceDispatcher.getActiveServiceQueue();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        processTime = new javax.swing.JTextField();
        reqRate = new javax.swing.JTextField();
        submitBtn = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Enter Inputs");

        jLabel2.setText("Request Arrival Rates:");

        jLabel3.setText("Processing Time:");

        reqRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqRateActionPerformed(evt);
            }
        });

        submitBtn.setText("Submit");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reqRate, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(processTime, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(submitBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel1)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(reqRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(processTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addComponent(submitBtn)
                .addContainerGap(64, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reqRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reqRateActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        // TODO add your handling code here:
        // Binding the user input to the product object
        
        //Thread thread = new RequestGenerator(Integer.parseInt(reqRate.getText()));
        //thread.start();
        
        //Thread threadD = new ReqServiceDispatcher(requestGenerator);
        //threadD.start();
        //serviceQueue.setProcessingTime(Integer.parseInt(processTime.getText()));
        //requestGenerator.setReqRate(reqServiceDispatcher, Integer.parseInt(reqRate.getText()));
        
        Thread t1 = new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                while(true){
                    synchronized(this){
                          //timer starts
                          requestGenerator.setReqRate(reqServiceDispatcher, Integer.parseInt(reqRate.getText()));
                for(int i = 0; i< requestGenerator.getReqRate(); i++){
                            requestGenerator.getReqQueue().enqueue((int) (Math.random() * 50 + 1));
                            System.out.println("in timer");
                        }
                /*
                Timer timer = new Timer(1000, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        for(int i = 0; i< requestGenerator.getReqRate(); i++){
                            requestGenerator.getReqQueue().enqueue((int) (Math.random() * 50 + 1));
                            System.out.println("in timer");
                        }
                    }
                    
                });
                timer.setRepeats(true);
                timer.start();
                */
                notify();
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CreateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                //timer ends

                    }
                }
              
            }
        });
 
        // Create consumer thread
        Thread t2 = new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                
                while(true){
                    synchronized(this){
                        //dispatcher starts
                while (!requestGenerator.getReqQueue().isEmpty()) {
                    
                    int request;
                    request = requestGenerator.getReqQueue().dequeue().data;
                    //if(serviceQueue==null||serviceQueue.isFull())=
                    int size=activeServiceQueue.getServiceQueueList().size();
                    if(size==0||activeServiceQueue.getServiceQueueList().get(size-1).isFull())
                    {
                        ServiceQueue serviceQueue  = new ServiceQueue();
                        serviceQueue.sqTimerDeque();
                        activeServiceQueue.getServiceQueueList().add(serviceQueue);
                        System.out.println("Service Queue Name : "+activeServiceQueue.getServiceQueueList());
                    }
                    //inserting into last queue
                    activeServiceQueue.getServiceQueueList().get(activeServiceQueue.getServiceQueueList().size()-1).enqueue(request);
                    
                     
                }
                System.out.println("Total Queue created: " + activeServiceQueue.getServiceQueueList().size() );
                System.out.println("Service Queue Name : "+activeServiceQueue.getServiceQueueList());
                
                notify();
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CreateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                //dispatcher ends
                    }
                }
                
                
            }
            
        });
 
        // Start both threads
        t1.start();
        t2.start();
        
        
        try {
            t1.join();
            t2.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(CreateJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
  
        //JOptionPane.showMessageDialog(null,"User input taken...processing requests..");
        //reqServiceDispatcher.checkReqQueueEmpty();
        //System.out.println("check Queue"+requestGenerator.getReqQueue().dequeue());
    }//GEN-LAST:event_submitBtnActionPerformed

    // Prompt user that product is successfully created
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField processTime;
    private javax.swing.JTextField reqRate;
    private javax.swing.JButton submitBtn;
    // End of variables declaration//GEN-END:variables
}
